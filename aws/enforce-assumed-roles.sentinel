import "aws-functions" as aws
import "tfrun"

# This policy restricts accounts that can be assumed by the AWS provider.
# It includes a map that maps roles to lists of regex expressions
# that match one or more workspace names

# It can only determine the role_arn if it is set to either a hard-coded value
# or to a reference to a single Terraform variable.
# If you want to the policy to pass if the assumed role contains a single
# non-variable reference or if it finds multiple references, then include a role
# called "complex" in the allowed_roles map and associate it with workspaces.

##################################################################################

# This is where we specify role <-> workspace mappings. 
# Only the roles listed here are allowed to be assumed by the specified workspace.
allowed_roles = {
  "arn:aws:iam::123412341234:role/role-dev": [
    "(.*)-dev$",
    "^dev-(.*)",
  ],
  "arn:aws:iam::567856785678:role/role-qa": [
    "(.*)-qa$",
    "^qa-(.*)",
  ],
  "arn:aws:iam::909012349090:role/role-prod": [
    "(.*)-prod$",
    "^prod-(.*)",
  ],
}

##################################################################################

validate_assumed_roles_with_map = func(roles_map, workspace_name) {

  validated = true

  assumed_roles = get_assumed_roles()

  for assumed_roles as address, role {
    if role is not "none" {
      if role not in keys(roles_map) {
        print("AWS provider", address, "has assumed role",
              role, "that is not allowed.")
        validated = false
      } else {
        # Validate that role is allowed for current workspace
        matched = false
        for roles_map[role] as workspace_regex {
          if workspace_name matches workspace_regex {
            matched = true
          }
        } // end for workspace_regex
        if not matched {
          print("Workspace", workspace_name, "is not allowed to use role", role)
          print("It used that role in the AWS provider", address)
          validated = false
        } // end matched check
      } // end role in roles_map
    } // end if role is not ""
  } // end for assumed_roles

  return validated
}

get_assumed_roles = func() {

  # Initialize empty map of roles indexed by aliases
  assumed_roles = {}

  # Get all AWS provider aliases
  aws_providers = config.find_providers_by_type("aws")

  # Iterate through all AWS provider aliases
  for aws_providers as address, data {
    assumed_roles[address] = determine_role_arn(address, data)
  } // end aws_providers

  return assumed_roles

}


# Get the current workspace name
workspace_name = tfrun.workspace.name

# DEBUGGING
print("The workspace name is: ", workspace_name)
print("The assumed roles are: ", aws.get_assumed_roles())

# Call the validation function
roles_validated = aws.validate_assumed_roles_with_map(allowed_roles, workspace_name)

# Main rule
main = rule {
  roles_validated
}
